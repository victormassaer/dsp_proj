import torch
import torch.nn as nn
import torch.nn.functional as F

NUM_EPOCHS = 20

class DoubleConv(nn.Module):
    def __init__(self, in_ch, out_ch):
        super(DoubleConv, self).__init__()
        self.double_conv = nn.Sequential(
            # takes a 3-channel image (RGB)
            # applies 2 convolutional layers with ReLU
            # outputs denoised 3-channel image
            # padding -> input/output size remains the same
            nn.Conv2d(in_ch, out_ch, 3, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(out_ch, out_ch, 3, padding=1),
            nn.ReLU(inplace=True)
        )

    def forward(self, x):
        return self.double_conv(x)

class MiniUNet(nn.Module):
    def __init__(self):
        super(MiniUNet, self).__init__()
        self.enc1 = DoubleConv(1, 32)
        self.pool1 = nn.MaxPool2d(2)

        self.enc2 = DoubleConv(32, 64)
        self.pool2 = nn.MaxPool2d(2)

        self.bottleneck = DoubleConv(64, 128)

        self.up2 = nn.ConvTranspose2d(128, 64, kernel_size=2, stride=2)
        self.dec2 = DoubleConv(128, 64)

        self.up1 = nn.ConvTranspose2d(64, 32, kernel_size=2, stride=2)
        self.dec1 = DoubleConv(64, 32)

        self.final = nn.Conv2d(32, 1, kernel_size=1)

    def forward(self, x):
        e1 = self.enc1(x)
        e2 = self.enc2(self.pool1(e1))
        b = self.bottleneck(self.pool2(e2))

        d2 = self.up2(b)
        d2 = torch.cat([d2, e2], dim=1)
        d2 = self.dec2(d2)

        d1 = self.up1(d2)
        d1 = torch.cat([d1, e1], dim=1)
        d1 = self.dec1(d1)

        out = self.final(d1)
        return out


class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
        self.net = nn.Sequential(
            # takes a 3-channel image (RGB)
            # applies 3 convolutional layers with ReLU
            # outputs denoised 3-channel image
            # padding -> input/output size remains the same
            nn.Conv2d(1, 32, kernel_size=3, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(32, 32, kernel_size=3, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(32, 32, kernel_size=3, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(32, 1, kernel_size=3, padding=1)
        )

    def forward(self, x):
        return self.net(x)


# GAN discriminator: decide whether image is real (from dataset) or fake (generated by the network/generator)
class Discriminator(nn.Module):
    def __init__(self):
        super(Discriminator, self).__init__()
        self.net = nn.Sequential(
            nn.Conv2d(1, 32, 4, stride=2, padding=1),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(32, 64, 4, stride=2, padding=1),
            nn.BatchNorm2d(64),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(64, 128, 4, stride=2, padding=1),
            nn.BatchNorm2d(128),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Flatten(),
            nn.Linear(128 * 20 * 30, 1),
            nn.Sigmoid()
        )

    def forward(self, x):
        return self.net(x)


# GAN wrapper: combines MiniUNet (generator) with Discriminator class and implements GAN loss functions
class DenoisingGAN(nn.Module):
    def __init__(self):
        super(DenoisingGAN, self).__init__()
        self.generator = MiniUNet()
        self.discriminator = Discriminator()

    def generator_loss(self, fake_pred, denoised_img, target_img, epoch=None, tot_epochs=NUM_EPOCHS):
        adv_loss = F.binary_cross_entropy(fake_pred, torch.ones_like(fake_pred))
        rec_loss = F.mse_loss(denoised_img, target_img)

        # dynamical weight for adversarial loss
        if epoch is not None:
          adv_weight = min(1.0, epoch/tot_epochs) * 0.001
        else:
          adv_weight = 0.001  # fallback

        # total_loss = 0.001 * adv_loss + rec_loss
        total_loss = adv_weight * adv_loss + rec_loss
        # return adv_loss + rec_loss
        return total_loss

    def discriminator_loss(self, real_pred, fake_pred):
        real_loss = F.binary_cross_entropy(real_pred, torch.ones_like(real_pred))
        fake_loss = F.binary_cross_entropy(fake_pred, torch.zeros_like(fake_pred))
        return (real_loss + fake_loss) / 2


def get_model(model_type='unet'):
    """
    Returns the model based on the given type.
    Options:
    - 'convnet': standard ConvNet
    - 'unet': mini U-Net
    - 'gan': GAN net with generator and discriminator
    """
    if model_type == 'convnet':
        return ConvNet()
    elif model_type == 'unet':
        return MiniUNet()
    elif model_type == 'gan':
        return DenoisingGAN()
    else:
        raise ValueError(f"Unsupported model_type: {model_type}")